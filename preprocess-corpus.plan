<?xml version="1.0" encoding="UTF-8"?>
<alvisnlp-plan id="preprocess_corpus">

  <read class="TextFileReader">
    <sourcePath filter=".txt$">__INPUT_FILES</sourcePath>
    <baseNameId/>
  </read>

  <segmentation href="res://segmentation.plan"/>

  <genia class="GeniaTagger">
    <geniaDir>__GENIA_DIR</geniaDir>
    <chunkFeature>chunk</chunkFeature>
    <entityFeature>genia-entity</entityFeature>
  </genia>

  <!-- stemming -->
  <stem class="PorterStemmer"/>

  <!-- Syntactic parsing -->
  <syntax>
    <ccg class="CCGParser">
      <executable>__CCG_EXECUTABLE</executable>
      <parserModel>__CCG_PARSER_MODEL</parserModel>
      <superModel>__CCG_SUPER_MODEL</superModel>
      <relationName>ccg-dependencies</relationName>
      <!-- CCG (value=false) or AG (value=true) -->
      <maxRuns>50</maxRuns>
      <lpTransformation>true</lpTransformation>
    </ccg>

    <enju class="EnjuParser">
      <enjuExecutable>__ENJU_EXEC</enjuExecutable>
      <dependenciesRelationName>enju-dependencies</dependenciesRelationName>
      <biology/>
    </enju>

    <stanford class="StanfordParser">
      <dependencyRelationName>stanford-dependencies</dependencyRelationName>
    </stanford>
  </syntax>

  <!-- Named entity recognition (LOCATION, PERSON, ORGANISATION) -->
  <stanford-ner class="StanfordNER">
    <labelFeatureName>stanford-label</labelFeatureName>
    <targetLayerName>stanford-ne</targetLayerName>
    <searchInContents/>
  </stanford-ner>

  <!-- Recognition of chemicals -->
  <chemspot class="Chemspot">
    <chemspotDir>__CHEMSPOT_DIR</chemspotDir>
    <noDict/>
  </chemspot>
  
  <!-- Abbreviation detection -->
  <abbrev class="Ab3P">
    <installDir>__AB3P_DIR</installDir>
    <!-- layers: 'short-forms', 'long-forms' -->
    <!-- in 'short-forms', feature 'long-form' -->
    <!-- relations: 'abbreviations', roles 'short-form', 'long-form' -->
  </abbrev>

  <!-- Term extraction (Yatea) -->
  <yatea class="YateaExtractor">
    <xmlTermsFile>yatea.xml</xmlTermsFile>
    <yateaExecutable>__YATEA_EXEC</yateaExecutable>
    <rcFile>res://yatea.rc</rcFile>
    <configDir>YaTeA/config-habitats</configDir>
    <localeDir>YaTeA/locale</localeDir>
  </yatea>

  <export>
    <tabular>
      <sentences class="TabularExport">
	<outDir>.</outDir>
	<corpusFile>sentences.txt</corpusFile>
	<lines>documents.sections.layer:sentences</lines>
	<columns separator=";">
	  section.document.@id;
	  start ^ "-" ^ end;
	  @form
	</columns>
      </sentences>

      <words class="TabularExport">
	<outDir>.</outDir>
	<corpusFile>words.txt</corpusFile>
	<lines>documents.sections.layer:words</lines>
	<columns separator=";">
	  section.document.@id;
	  start ^ "-" ^ end;
	  @form
	</columns>
      </words>
      
      <genia class="TabularExport">
	<outDir>.</outDir>
	<corpusFile>genia.txt</corpusFile>
	<lines>documents.sections.layer:words</lines>
	<columns separator=";">
	  section.document.@id;
	  start ^ "-" ^ end;
	  @form;
	  @pos;
	  @lemma;
	  @chunk;
	  @genia-entity
	</columns>
      </genia>
  
      <stems class="TabularExport">
	<outDir>.</outDir>
	<corpusFile>stems.txt</corpusFile>
	<lines>documents.sections.layer:words</lines>
	<columns separator=";">
	  section.document.@id;
	  start ^ "-" ^ end;
	  @form;
	  @stem
	</columns>
      </stems>
  
      <ccg class="TabularExport">
	<outDir>.</outDir>
	<corpusFile>ccg-dependencies.txt</corpusFile>
	<lines>documents.sections.relations:ccg-dependencies.tuples</lines>
	<columns separator=";">
	  section.document.@id;
	  args:sentence.start ^ "-" ^ args:sentence.end;
	  @label;
	  args:head.@form;
	  args:head.start ^ "-" ^ args:head.end;
	  args:dependent.@form;
	  args:dependent.start ^ "-" ^ args:dependent.end
	</columns>
      </ccg>
  
      <enju class="TabularExport">
	<outDir>.</outDir>
	<corpusFile>enju-dependencies.txt</corpusFile>
	<lines>documents.sections.relations:enju-dependencies.tuples</lines>
	<columns separator=";">
	  section.document.@id;
	  args:sentence.start ^ "-" ^ args:sentence.end;
	  @label;
	  args:head.@form;
	  args:head.start ^ "-" ^ args:head.end;
	  @arg-type;
	  args:dependent.@form;
	  args:dependent.start ^ "-" ^ args:dependent.end
	</columns>
      </enju>

      <stanford class="TabularExport">
	<outDir>.</outDir>
	<corpusFile>stanford-dependencies.txt</corpusFile>
	<lines>documents.sections.relations:stanford-dependencies.tuples</lines>
	<columns separator=";">
	  section.document.@id;
	  args:sentence.start ^ "-" ^ args:sentence.end;
	  @label;
	  args:head.@form;
	  args:head.start ^ "-" ^ args:head.end;
	  args:dependent.@form;
	  args:dependent.start ^ "-" ^ args:dependent.end
	</columns>
      </stanford>

      <abbreviations class="TabularExport">
	<outDir>.</outDir>
	<corpusFile>ab3p.txt</corpusFile>
	<lines>documents.sections.relations:abbreviations.tuples</lines>
	<columns separator=";">
	  section.document.@id;
	  args:short-form.@form;
	  args:short-form.start ^ "-" ^ args:short-form.end;
	  args:long-form.@form;
	  args:long-form.start ^ "-" ^ args:long-form.end
	</columns>
      </abbreviations>
      
      <stanford-ne class="TabularExport">
	<outDir>.</outDir>
	<corpusFile>stanford-ne.txt</corpusFile>
	<lines>documents.sections.layer:stanford-ne</lines>
	<columns separator=";">
	  section.document.@id;
	  start ^ "-" ^ end;
	  @form;
	  @stanford-label
	</columns>
      </stanford-ne>

      <chemicals class="TabularExport">
	<outDir>.</outDir>
	<corpusFile>chemspot.txt</corpusFile>
	<files>$</files>
	<fileName>"chem-ne.txt"</fileName>
	<lines>documents.sections.layer:chemspot</lines>
	<columns>
	  section.document.@id,
	  start ^ "-" ^ end,
	  @form,
	  @chem-type
	</columns>
      </chemicals>
    </tabular>

  <!--

<rdf class="RDFExport">
<outDir>.</outDir>
<files>$</files>
<fileName>test.ttl"</fileName>
<format>turtle</format>
<prefixes>
OBT=http://bibliome.jouy.inra.fr/OntoBiotope#,
obta=http://bibliome.jouy.inra.fr/OntoBiotope/Annotation#,
pmid=https://www.ncbi.nlm.nih.gov/pubmed/,
taxid=https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=
</prefixes>
<statements separator=";">
documents.sections.layer.uri:set(obta^id:unique);

documents.sections.layer[@taxid].(
stmt:res(rdf:type, taxid^@taxid)
| stmt:res(obta:document, pmid^section.document.@id)
| stmt:str(obta:form, @form)
);

documents.sections.layer[@concept-id].(
stmt:res(rdf:type, OBT^str:after:':'(@concept-id))
| stmt:res(obta:document, pmid^section.document.@id)
| stmt:str(obta:form, @form)
);

documents.sections.relations:CooccurrenceLocalization.tuples as l.args:Bacterium.
stmt:res(OBT:lives_in, obta^l.args:Localization.id:unique)
</statements>
</rdf>
  -->
  </export>
</alvisnlp-plan>
